// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package null

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson60751f33DecodeGithubComPhilpearlPlencNull(in *jlexer.Lexer, out *benchThing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "I":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.I).UnmarshalJSON(data))
			}
		case "I2":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.I2).UnmarshalJSON(data))
			}
		case "B":
			(out.B).UnmarshalEasyJSON(in)
		case "B2":
			(out.B2).UnmarshalEasyJSON(in)
		case "F":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.F).UnmarshalJSON(data))
			}
		case "S":
			(out.S).UnmarshalEasyJSON(in)
		case "T":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.T).UnmarshalJSON(data))
			}
		case "U":
			(out.U).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60751f33EncodeGithubComPhilpearlPlencNull(out *jwriter.Writer, in benchThing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"I\":"
		out.RawString(prefix[1:])
		out.Raw((in.I).MarshalJSON())
	}
	{
		const prefix string = ",\"I2\":"
		out.RawString(prefix)
		out.Raw((in.I2).MarshalJSON())
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.Raw((in.B).MarshalJSON())
	}
	{
		const prefix string = ",\"B2\":"
		out.RawString(prefix)
		out.Raw((in.B2).MarshalJSON())
	}
	{
		const prefix string = ",\"F\":"
		out.RawString(prefix)
		out.Raw((in.F).MarshalJSON())
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.Raw((in.S).MarshalJSON())
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Raw((in.T).MarshalJSON())
	}
	{
		const prefix string = ",\"U\":"
		out.RawString(prefix)
		out.Raw((in.U).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v benchThing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60751f33EncodeGithubComPhilpearlPlencNull(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *benchThing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60751f33DecodeGithubComPhilpearlPlencNull(l, v)
}
